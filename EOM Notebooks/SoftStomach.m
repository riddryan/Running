function xdot = fstatederivative(t, x)

% Define constants

% Define forces: 

% State assignments
q1 = x(1); q2 = x(2); q3 = x(3); q4 = x(4); q5 = x(5); 
u1 = x(6); u2 = x(7); u3 = x(8); u4 = x(9); u5 = x(10); 

c1 = cos(q1); s1 = sin(q1); 

MM = zeros(5,5); rhs = zeros(5,1);

% Mass Matrix
MM(1,1) = mfoot*(q2*q2); MM(1,2) = 0; MM(1,3) = 0; MM(1,4) = -(q2*s1*mfoot); ...
MM(1,5) = c1*q2*mfoot; 
MM(2,1) = MM(1,2); MM(2,2) = mfoot; MM(2,3) = 0; MM(2,4) = c1*mfoot; MM(2,5) ...
= s1*mfoot; 
MM(3,1) = MM(1,3); MM(3,2) = MM(2,3); MM(3,3) = msoftstomach; MM(3,4) = 0; ...
MM(3,5) = msoftstomach; 
MM(4,1) = MM(1,4); MM(4,2) = MM(2,4); MM(4,3) = MM(3,4); MM(4,4) = mfoot + ...
mpelvis + msoftstomach; MM(4,5) = 0; 
MM(5,1) = MM(1,5); MM(5,2) = MM(2,5); MM(5,3) = MM(3,5); MM(5,4) = MM(4,5); ...
MM(5,5) = mfoot + mpelvis + msoftstomach; 

% righthand side terms
rhs(1) = -(q2*mfoot*(2*u1*u2 + g*cos(q1 - gslope))); 
rhs(2) = -(u2*cleg) + kleg*lleg + q2*(-kleg + mfoot*(u1*u1)) - g*mfoot*sin(q1 ...
- gslope); 
rhs(3) = -(u3*csoftstomach) - q3*ksoftstomach + ksoftstomach*lsoftstomach - ...
g*msoftstomach*cos(gslope); 
rhs(4) = 2*s1*u1*u2*mfoot + c1*q2*mfoot*(u1*u1) + g*(mfoot + mpelvis + ...
msoftstomach)*sin(gslope); 
rhs(5) = -2*c1*u1*u2*mfoot - g*(mfoot + mpelvis + msoftstomach)*cos(gslope) + ...
q2*s1*mfoot*(u1*u1); 

udot = MM\rhs;
xdot = [x(5+1:10); udot];

constraintJacobianStance(1,1) = -(q2*s1); constraintJacobianStance(1,2) = c1; ...
constraintJacobianStance(1,3) = 0; constraintJacobianStance(1,4) = 1; ...
constraintJacobianStance(1,5) = 0; 
constraintJacobianStance(2,1) = c1*q2; constraintJacobianStance(2,2) = s1; ...
constraintJacobianStance(2,3) = 0; constraintJacobianStance(2,4) = 0; ...
constraintJacobianStance(2,5) = 1; 


constraintJacobianStanceDot(1,1) = -(c1*q2*u1) - s1*u2; ...
constraintJacobianStanceDot(1,2) = -(s1*u1); constraintJacobianStanceDot(1,3) ...
= 0; constraintJacobianStanceDot(1,4) = 0; constraintJacobianStanceDot(1,5) = ...
0; 
constraintJacobianStanceDot(2,1) = -(q2*s1*u1) + c1*u2; ...
constraintJacobianStanceDot(2,2) = c1*u1; constraintJacobianStanceDot(2,3) = ...
0; constraintJacobianStanceDot(2,4) = 0; constraintJacobianStanceDot(2,5) = ...
0; 


constraintJacobianAerial(1,1) = 1; constraintJacobianAerial(1,2) = 0; ...
constraintJacobianAerial(1,3) = 0; constraintJacobianAerial(1,4) = 0; ...
constraintJacobianAerial(1,5) = 0; 
constraintJacobianAerial(2,1) = 0; constraintJacobianAerial(2,2) = 1; ...
constraintJacobianAerial(2,3) = 0; constraintJacobianAerial(2,4) = 0; ...
constraintJacobianAerial(2,5) = 0; 


constraintJacobianAerialDot(1,1) = 0; constraintJacobianAerialDot(1,2) = 0; ...
constraintJacobianAerialDot(1,3) = 0; constraintJacobianAerialDot(1,4) = 0; ...
constraintJacobianAerialDot(1,5) = 0; 
constraintJacobianAerialDot(2,1) = 0; constraintJacobianAerialDot(2,2) = 0; ...
constraintJacobianAerialDot(2,3) = 0; constraintJacobianAerialDot(2,4) = 0; ...
constraintJacobianAerialDot(2,5) = 0; 


kineticEnergy = (mpelvis*(u4*u4 + u5*u5) + mfoot*(-2*q2*u1*(s1*u4 - c1*u5) + ...
2*u2*(c1*u4 + s1*u5) + q2*q2*(u1*u1) + u2*u2 + u4*u4 + u5*u5) + ...
msoftstomach*(u4*u4 + (u3 + u5)*(u3 + u5)))/2.;

potentialEnergy = (kleg*((-q2 + lleg)*(-q2 + lleg)) + ksoftstomach*((-q3 + ...
lsoftstomach)*(-q3 + lsoftstomach)) + 2*g*mpelvis*(q5*cos(gslope) - ...
q4*sin(gslope)) - 2*g*mfoot*(-(q5*cos(gslope)) - q2*sin(q1 - gslope) + ...
q4*sin(gslope)) - 2*msoftstomach*(-((q3 + q5)*g*cos(gslope)) + ...
q4*g*sin(gslope)))/2.;

PEgrav = -(mpelvis*(-(q5*g*cos(gslope)) + q4*g*sin(gslope))) - ...
msoftstomach*(-((q3 + q5)*g*cos(gslope)) + q4*g*sin(gslope)) - ...
mfoot*(-(q5*g*cos(gslope)) - q2*g*sin(q1 - gslope) + q4*g*sin(gslope));

PEspring = (kleg*((q2 - lleg)*(q2 - lleg)))/2. + (ksoftstomach*((q3 - ...
lsoftstomach)*(q3 - lsoftstomach)))/2.;

comvx = (-(q2*s1*u1*mfoot) + c1*u2*mfoot + u4*(mfoot + mpelvis + ...
msoftstomach))*power(mfoot + mpelvis + msoftstomach,-1);

comvy = (c1*q2*u1*mfoot + s1*u2*mfoot + u5*mfoot + u5*mpelvis + (u3 + ...
u5)*msoftstomach)*power(mfoot + mpelvis + msoftstomach,-1);

points.foot(1) = c1*q2 + q4; 
points.foot(2) = q5 + q2*s1; 


points.pelvis(1) = q4; 
points.pelvis(2) = q5; 


points.softstomach(1) = q4; 
points.softstomach(2) = q3 + q5; 


points.COMpos(1) = c1*q2*mfoot*power(mfoot + mpelvis + msoftstomach,-1) + ...
(q4*mfoot + q4*mpelvis + q4*msoftstomach)*power(mfoot + mpelvis + ...
msoftstomach,-1); 
points.COMpos(2) = q2*s1*mfoot*power(mfoot + mpelvis + msoftstomach,-1) + ...
(q5*mfoot + q5*mpelvis + (q3 + q5)*msoftstomach)*power(mfoot + mpelvis + ...
msoftstomach,-1); 


velJacobian(1,1) = 0; velJacobian(1,2) = 0; velJacobian(1,3) = 0; ...
velJacobian(1,4) = 1; velJacobian(1,5) = 0; 
velJacobian(2,1) = 0; velJacobian(2,2) = 0; velJacobian(2,3) = 0; ...
velJacobian(2,4) = 0; velJacobian(2,5) = 1; 
velJacobian(3,1) = 0; velJacobian(3,2) = 0; velJacobian(3,3) = 0; ...
velJacobian(3,4) = 1; velJacobian(3,5) = 0; 
velJacobian(4,1) = 0; velJacobian(4,2) = 0; velJacobian(4,3) = 1; ...
velJacobian(4,4) = 0; velJacobian(4,5) = 1; 
velJacobian(5,1) = -(q2*s1); velJacobian(5,2) = c1; velJacobian(5,3) = 0; ...
velJacobian(5,4) = 1; velJacobian(5,5) = 0; 
velJacobian(6,1) = c1*q2; velJacobian(6,2) = s1; velJacobian(6,3) = 0; ...
velJacobian(6,4) = 0; velJacobian(6,5) = 1; 

